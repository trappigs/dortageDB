@model IEnumerable<Randevu>

@{
    ViewData["Title"] = "Tüm Randevular";
    Layout = "_LayoutTopraktar";
}

<link rel="stylesheet" href="~/css/topraktar-main-panel.css" asp-append-version="true" />

<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
        flex-wrap: wrap;
        gap: 16px;
    }

    .page-title {
        font-size: 28px;
        font-weight: 700;
        color: #000a68;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .admin-badge {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        padding: 4px 12px;
        border-radius: 6px;
        font-size: 11px;
        font-weight: 700;
    }

    .header-actions {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .btn-back {
        background: #f3f4f6;
        color: #374151;
        padding: 12px 24px;
        border-radius: 10px;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all 0.2s;
        border: none;
        cursor: pointer;
    }

        .btn-back:hover {
            background: #e5e7eb;
        }

    .btn-new-randevu {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        color: white;
        padding: 12px 24px;
        border-radius: 10px;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all 0.2s;
        border: none;
        cursor: pointer;
    }

        .btn-new-randevu:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(59, 130, 246, 0.3);
        }

    .filters-bar {
        background: white;
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 24px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        display: flex;
        gap: 16px;
        flex-wrap: wrap;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

        .filter-group label {
            display: block;
            font-size: 13px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 6px;
        }

        .filter-group select,
        .filter-group input {
            width: 100%;
            padding: 10px 14px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
        }

    .randevular-table {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    thead {
        background: #f9fafb;
    }

    th {
        padding: 16px;
        text-align: left;
        font-size: 14px;
        font-weight: 600;
        color: #374151;
        border-bottom: 1px solid #e5e7eb;
    }

    td {
        padding: 16px;
        font-size: 14px;
        color: #6b7280;
        border-bottom: 1px solid #f3f4f6;
    }

    tr:hover {
        background: #f9fafb;
    }

    .status-badge {
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
        display: inline-block;
    }

    .status-pending {
        background: #fef3c7;
        color: #92400e;
    }

    .status-confirmed {
        background: #dbeafe;
        color: #1e40af;
    }

    .status-completed {
        background: #d1fae5;
        color: #065f46;
    }

    .status-cancelled {
        background: #fee2e2;
        color: #991b1b;
    }

    .status-no_show {
        background: #f3f4f6;
        color: #374151;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
        justify-content: center;
    }

    .btn-action {
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 4px;
        transition: all 0.2s;
        border: none;
        cursor: pointer;
    }

    .btn-view {
        background: #dbeafe;
        color: #1e40af;
    }

        .btn-view:hover {
            background: #bfdbfe;
        }

    .btn-edit {
        background: #fef3c7;
        color: #92400e;
    }

        .btn-edit:hover {
            background: #fde68a;
        }

    .btn-delete {
        background: #fee2e2;
        color: #dc2626;
    }

        .btn-delete:hover {
            background: #fecaca;
        }

    /* Modal Styles */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        align-items: center;
        justify-content: center;
        overflow-y: auto;
    }

        .modal-overlay.active {
            display: flex;
        }

    .modal-content {
        background: white;
        border-radius: 16px;
        padding: 32px;
        max-width: 600px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 25px rgba(0, 0, 0, 0.25);
        margin: 20px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
    }

        .modal-header h3 {
            font-size: 20px;
            font-weight: 700;
            color: #1f2937;
            margin: 0;
        }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        color: #6b7280;
        cursor: pointer;
        padding: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 6px;
        transition: background 0.2s;
    }

        .modal-close:hover {
            background: #f3f4f6;
        }

    .modal-body {
        margin-bottom: 24px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
    }

    .form-group {
        margin-bottom: 16px;
    }

        .form-group label {
            display: block;
            font-size: 14px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 6px;
        }

        .form-group select,
        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 10px 14px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            font-family: inherit;
        }

            .form-group select:focus,
            .form-group input:focus,
            .form-group textarea:focus {
                outline: none;
                border-color: #000a68;
                box-shadow: 0 0 0 3px rgba(0, 10, 104, 0.1);
            }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

    .modal-footer {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
    }

    .btn-modal {
        padding: 10px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 600;
        border: none;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-cancel {
        background: #f3f4f6;
        color: #374151;
    }

        .btn-cancel:hover {
            background: #e5e7eb;
        }

    .btn-save {
        background: linear-gradient(135deg, #000a68 0%, #001a88 100%);
        color: white;
    }

        .btn-save:hover {
            transform: translateY(-2px);
        }

    .btn-confirm-delete {
        background: #dc2626;
        color: white;
    }

        .btn-confirm-delete:hover {
            background: #b91c1c;
        }

    .detail-row {
        display: flex;
        justify-content: space-between;
        padding: 12px 0;
        border-bottom: 1px solid #f3f4f6;
    }

        .detail-row:last-child {
            border-bottom: none;
        }

    .detail-label {
        font-weight: 600;
        color: #6b7280;
    }

    .detail-value {
        color: #1f2937;
        font-weight: 500;
    }

    .empty-state {
        text-align: center;
        padding: 80px 20px;
    }

    .empty-icon {
        font-size: 64px;
        margin-bottom: 16px;
        opacity: 0.5;
    }

    @@media (max-width: 768px) {
        .randevular-table

    {
        overflow-x: auto;
    }

    table {
        min-width: 900px;
    }

    .form-row {
        grid-template-columns: 1fr;
    }

    }
</style>

<div class="topraktar-main-panel">
    <div class="main-content">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">@TempData["SuccessMessage"]</div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-error">@TempData["ErrorMessage"]</div>
        }

        <div class="page-header">
            <div>
                <h1 class="page-title">
                    Tüm Randevular
                    <span class="admin-badge">ADMIN</span>
                </h1>
                <p style="color: #6b7280;">Sistemde toplam @Model.Count() randevu</p>
            </div>
            <div class="header-actions">
                <button type="button" class="btn-new-randevu" onclick="openCreateModal()">
                    ➕ Yeni Randevu
                </button>
                <a asp-action="Index" class="btn-back">
                    ← Dashboard'a Dön
                </a>
            </div>
        </div>

        <div class="filters-bar">
            <div class="filter-group">
                <label>Durum</label>
                <select id="statusFilter">
                    <option value="">Tümü</option>
                    <option value="OnayBekliyor">Bekliyor</option>
                    <option value="GorusmeBekleniyor">Onaylandı</option>
                    <option value="OdemeAlindi">Tamamlandı</option>
                    <option value="Iptal">İptal</option>
                    <option value="Gerceklesmedi">Gelmedi</option>
                </select>
            </div>
            <div class="filter-group">
                <label>Ara</label>
                <input type="text" id="searchInput" placeholder="Müşteri veya topraktar ara...">
            </div>
        </div>

        @if (Model.Any())
        {
            <div class="randevular-table">
                <table id="randevularTable">
                    <thead>
                        <tr>
                            <th>Randevu ID</th>
                            <th>Müşteri</th>
                            <th>Topraktar</th>
                            <th>Tarih & Saat</th>
                            <th>Tip</th>
                            <th>Durum</th>
                            <th style="text-align: center;">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var randevu in Model)
                        {
                            var musteriAd = $"{randevu.Musteri.Ad} {randevu.Musteri.Soyad}";
                            var topraktarAd = $"{randevu.Topraktar.Ad} {randevu.Topraktar.Soyad}";
                            var tarih = randevu.RandevuZaman.ToString("dd MMM yyyy HH:mm");
                            var durum = randevu.RandevuDurum.ToString();

                            <tr data-status="@durum.ToLower()"
                                data-search="@musteriAd @topraktarAd">
                                <td><strong>#@randevu.RandevuID</strong></td>
                                <td>
                                    <div style="line-height: 1.4;">
                                        <strong>@musteriAd</strong><br />
                                        <span style="font-size: 12px; color: #6b7280;">(@randevu.Musteri.Telefon)</span>
                                    </div>
                                </td>
                                <td>
                                    <div style="line-height: 1.4;">
                                        <strong>@topraktarAd</strong><br />
                                        <span style="font-size: 12px; color: #6b7280;">(@randevu.Topraktar.PhoneNumber)</span>
                                    </div>
                                </td>
                                <td>@tarih</td>
                                <td>@randevu.RandevuTipi</td>
                                <td>
                                    <span class="status-badge @dortageDB.Helpers.RandevuHelper.GetDurumClass(randevu.RandevuDurum)">
                                        @dortageDB.Helpers.RandevuHelper.GetDurumIcon(randevu.RandevuDurum) @dortageDB.Helpers.RandevuHelper.GetDurumText(randevu.RandevuDurum)
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn-action btn-view"
                                                data-musteri="@musteriAd"
                                                data-topraktar="@topraktarAd"
                                                data-tarih="@tarih"
                                                data-tip="@randevu.RandevuTipi"
                                                data-aciklama="@(randevu.Aciklama ?? "")"
                                                data-durum="@durum"
                                                onclick="openViewModalData(this)">
                                            👁️ Görüntüle
                                        </button>
                                        <button class="btn-action btn-edit"
                                                data-id="@randevu.RandevuID"
                                                data-zaman="@randevu.RandevuZaman.ToString("yyyy-MM-ddTHH:mm")"
                                                data-tip="@randevu.RandevuTipi"
                                                data-aciklama="@(randevu.Aciklama ?? "")"
                                                data-durum="@randevu.RandevuDurum.ToString()"
                                                onclick="openEditModalData(this)">
                                            ✏️ Düzenle
                                        </button>
                                        <button class="btn-action btn-delete"
                                                data-id="@randevu.RandevuID"
                                                onclick="openDeleteModalData(this)">
                                            🗑️ Sil
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">📅</div>
                <h3 style="color: #1f2937; margin-bottom: 8px;">Henüz randevu yok</h3>
                <p style="color: #6b7280;">Sistemde kayıtlı randevu bulunmuyor</p>
            </div>
        }
    </div>
</div>

<!-- Create Randevu Modal -->
<div class="modal-overlay" id="createModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>➕ Yeni Randevu Ekle</h3>
            <button type="button" class="modal-close" onclick="closeCreateModal()">×</button>
        </div>
        <form asp-controller="Admin" asp-action="CreateRandevu" method="post" id="createRandevuForm">
            @Html.AntiForgeryToken()
            <div class="modal-body">
                <input type="hidden" name="RandevuZaman" id="createRandevuZaman">
                <div class="form-row">
                    <div class="form-group">
                        <label>Topraktar *</label>
                        <select name="TopraktarID" id="createTopraktar" required>
                            <option value="">Topraktar Seçin</option>
                            @{
                                var userManager = ViewContext.HttpContext.RequestServices
                                .GetService(typeof(Microsoft.AspNetCore.Identity.UserManager<dortageDB.Entities.AppUser>))
                                as Microsoft.AspNetCore.Identity.UserManager<dortageDB.Entities.AppUser>;
                                if (userManager != null)
                                {
                                    var topraktarlar = await userManager.GetUsersInRoleAsync("topraktar");
                                    foreach (var t in topraktarlar.OrderBy(x => x.Ad).ThenBy(x => x.Soyad))
                                    {
                                        <option value="@t.Id">@t.Ad @t.Soyad (@t.PhoneNumber)</option>
                                    }
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Müşteri *</label>
                        <select name="MusteriId" id="createMusteri" required>
                            <option value="">Müşteri Seçin</option>
                            @{
                                var musteriler = ViewContext.HttpContext.RequestServices
                                .GetService(typeof(dortageDB.Data.AppDbContext)) as dortageDB.Data.AppDbContext;
                                if (musteriler != null)
                                {
                                    foreach (var m in musteriler.Musteriler.OrderBy(x => x.Ad).ThenBy(x => x.Soyad))
                                    {
                                        <option value="@m.IdMusteri" data-topraktarid="@m.TopraktarID">@m.Ad @m.Soyad (@m.Telefon)</option>
                                    }
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Randevu Tarihi *</label>
                        <select id="createTarih" required>
                            <option value="">Tarih seçin</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Randevu Saati *</label>
                        <select id="createSaat" required>
                            <option value="">Saat seçin</option>
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Randevu Tipi *</label>
                        <select name="RandevuTipi" required>
                            <option value="">Tip seçin</option>
                            <option value="Ofis">Ofis</option>
                            <option value="Online">Online</option>
                            <option value="Yer Gösterimi">Yer Gösterimi</option>
                        </select>
                    </div>
                </div>
                <div class="form-group full-width">
                    <label>Açıklama</label>
                    <textarea name="Aciklama" rows="3" maxlength="500" placeholder="Randevu ile ilgili notlar..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-modal btn-cancel" onclick="closeCreateModal()">İptal</button>
                <button type="submit" class="btn-modal btn-save">Kaydet</button>
            </div>
        </form>
    </div>
</div>

<!-- View Randevu Modal -->
<div class="modal-overlay" id="viewModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>👁️ Randevu Detayları</h3>
            <button type="button" class="modal-close" onclick="closeViewModal()">×</button>
        </div>
        <div class="modal-body">
            <div class="detail-row">
                <span class="detail-label">Müşteri:</span>
                <span class="detail-value" id="viewMusteri"></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Topraktar:</span>
                <span class="detail-value" id="viewTopraktar"></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Randevu Tarihi:</span>
                <span class="detail-value" id="viewTarih"></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Randevu Tipi:</span>
                <span class="detail-value" id="viewTip"></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Açıklama:</span>
                <span class="detail-value" id="viewAciklama"></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Durum:</span>
                <span class="detail-value" id="viewDurum"></span>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-modal btn-cancel" onclick="closeViewModal()">Kapat</button>
        </div>
    </div>
</div>

<!-- Edit Randevu Modal -->
<!-- Edit Randevu Modal -->
<div class="modal-overlay" id="editModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>✏️ Randevuyu Düzenle</h3>
            <button type="button" class="modal-close" onclick="closeEditModal()">×</button>
        </div>
        <form asp-controller="Admin" asp-action="EditRandevu" method="post" id="editRandevuForm">
            @Html.AntiForgeryToken()
            <div class="modal-body">
                <input type="hidden" name="id" id="editRandevuId">
                <input type="hidden" name="randevuZaman" id="editRandevuZaman">
                <div class="form-row">
                    <div class="form-group">
                        <label>Randevu Tarihi *</label>
                        <input type="date" id="editTarih" required>
                    </div>
                    <div class="form-group">
                        <label>Randevu Saati *</label>
                        <select id="editSaat" required>
                            <option value="">Saat seçin</option>
                        </select>
                    </div>
                </div>
                <div class="form-group full-width">
                    <label>Randevu Tipi *</label>
                    <select name="randevuTipi" id="editTip" required>
                        <option value="">Tip seçin</option>
                        <option value="Ofis">Ofis</option>
                        <option value="Online">Online</option>
                        <option value="Yer Gösterimi">Yer Gösterimi</option>
                    </select>
                </div>
                <div class="form-group full-width">
                    <label>Açıklama</label>
                    <textarea name="aciklama" id="editAciklama" rows="3" maxlength="500" placeholder="Randevu ile ilgili notlar..."></textarea>
                </div>
                <div class="form-group full-width">
                    <label>Randevu Durumu *</label>
                    <select name="randevuDurum" id="editDurum" required>
                        <option value="OnayBekliyor">⏳ Onay Bekliyor</option>
                        <option value="GorusmeBekleniyor">📅 Görüşme Bekleniyor</option>
                        <option value="KararBekleniyor">⏱️ Görüşüldü - Karar Bekleniyor</option>
                        <option value="Olumsuz">❌ Görüşüldü - Olumsuz</option>
                        <option value="KaporaAlindi">💰 Görüşüldü - Kapora Alındı</option>
                        <option value="OdemeAlindi">✅ Görüşüldü - Ödeme Alındı</option>
                        <option value="Gerceklesmedi">⊘ Gerçekleşmedi</option>
                        <option value="Iptal">✗ İptal</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-modal btn-cancel" onclick="closeEditModal()">İptal</button>
                <button type="submit" class="btn-modal btn-save">Güncelle</button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal-overlay" id="deleteModal">
    <div class="modal-content" style="max-width: 400px;">
        <div class="modal-header">
            <h3>🗑️ Randevuyu Sil</h3>
            <button type="button" class="modal-close" onclick="closeDeleteModal()">×</button>
        </div>
        <form asp-controller="Admin" asp-action="DeleteRandevu" method="post">
            @Html.AntiForgeryToken()
            <div class="modal-body">
                <input type="hidden" name="id" id="deleteRandevuId">
                <p style="color: #6b7280; line-height: 1.6;">
                    Bu randevuyu silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-modal btn-cancel" onclick="closeDeleteModal()">İptal</button>
                <button type="submit" class="btn-modal btn-confirm-delete">Evet, Sil</button>
            </div>
        </form>
    </div>
</div>

<script>
    console.log('✅ AllRandevular sayfası yüklendi');

    // Store original musteri options globally
    let originalMusteriOptions = [];

    // Create Modal
    function openCreateModal() {
        console.log('➕ Create modal açılıyor');

        // Reset form
        document.getElementById('createRandevuForm').reset();
        document.getElementById('createTopraktar').disabled = false;
        document.getElementById('createMusteri').disabled = false;

        // Reset musteri options to show all
        const musteriSelect = document.getElementById('createMusteri');
        musteriSelect.innerHTML = '<option value="">Müşteri Seçin</option>';
        originalMusteriOptions.forEach(opt => {
            musteriSelect.appendChild(opt.cloneNode(true));
        });

        // Populate date options (next 30 days)
        populateCreateDateOptions();

        document.getElementById('createModal').classList.add('active');
    }

    function closeCreateModal() {
        document.getElementById('createModal').classList.remove('active');
    }

    // Populate date options for create modal
    function populateCreateDateOptions() {
        const tarihSelect = document.getElementById('createTarih');
        tarihSelect.innerHTML = '<option value="">Tarih seçin</option>';

        const today = new Date();

        // Generate next 30 days
        for (let i = 0; i < 30; i++) {
            const date = new Date(today);
            date.setDate(today.getDate() + i);

            const dateStr = date.toISOString().split('T')[0];
            const displayDate = date.toLocaleDateString('tr-TR', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            const option = document.createElement('option');
            option.value = dateStr;
            option.textContent = displayDate;
            tarihSelect.appendChild(option);
        }
    }

    // Populate hour options for create modal
    function populateCreateHourOptions(selectedDate) {
        const saatSelect = document.getElementById('createSaat');
        saatSelect.innerHTML = '<option value="">Saat seçin</option>';

        const today = new Date();
        const todayStr = today.toISOString().split('T')[0];
        const currentHour = today.getHours();

        // Generate hours from 06:00 to 20:00
        for (let hour = 6; hour <= 20; hour++) {
            // If selected date is today, skip past hours
            if (selectedDate === todayStr && hour <= currentHour) {
                continue;
            }

            const hourStr = hour.toString().padStart(2, '0') + ':00';
            const option = document.createElement('option');
            option.value = hourStr;
            option.textContent = hourStr;
            saatSelect.appendChild(option);
        }
    }

    // View Modal - DATA ATTRIBUTE İLE
    function openViewModalData(button) {
        const musteri = button.getAttribute('data-musteri');
        const topraktar = button.getAttribute('data-topraktar');
        const tarih = button.getAttribute('data-tarih');
        const aciklama = button.getAttribute('data-aciklama');
        const tip = button.getAttribute('data-tip');
        const durum = button.getAttribute('data-durum');

        console.log('👁️ View modal açılıyor');

        document.getElementById('viewMusteri').textContent = musteri;
        document.getElementById('viewTopraktar').textContent = topraktar;
        document.getElementById('viewTarih').textContent = tarih;
        document.getElementById('viewTip').textContent = tip;
        document.getElementById('viewAciklama').textContent = aciklama || '-';
        document.getElementById('viewDurum').textContent = getDurumText(durum);

        document.getElementById('viewModal').classList.add('active');
    }

    function closeViewModal() {
        document.getElementById('viewModal').classList.remove('active');
    }

    // Edit Modal - DATA ATTRIBUTE İLE
    function openEditModalData(button) {
        const id = button.getAttribute('data-id');
        const zaman = button.getAttribute('data-zaman'); // Format: yyyy-MM-ddTHH:mm
        const aciklama = button.getAttribute('data-aciklama');
        const tip = button.getAttribute('data-tip');
        const durum = button.getAttribute('data-durum');

        console.log('✏️ Edit modal açılıyor - ID:', id);

        // Parse datetime
        const [tarih, saat] = zaman.split('T');
        const saatOnly = saat.substring(0, 2) + ':00'; // Get hour only

        document.getElementById('editRandevuId').value = id;
        document.getElementById('editTarih').value = tarih;
        document.getElementById('editAciklama').value = aciklama || '';
        document.getElementById('editTip').value = tip;
        document.getElementById('editDurum').value = durum;

        // Populate hour options based on selected date
        populateHourOptions(tarih, saatOnly);

        document.getElementById('editModal').classList.add('active');
    }

    // Generate hour options (06:00 - 20:00)
    function populateHourOptions(selectedDate, selectedHour = null) {
        const saatSelect = document.getElementById('editSaat');
        saatSelect.innerHTML = '<option value="">Saat seçin</option>';

        const today = new Date();
        const todayStr = today.toISOString().split('T')[0];
        const currentHour = today.getHours();

        // Generate hours from 06:00 to 20:00
        for (let hour = 6; hour <= 20; hour++) {
            // If selected date is today, skip past hours
            if (selectedDate === todayStr && hour < currentHour) {
                continue;
            }

            const hourStr = hour.toString().padStart(2, '0') + ':00';
            const option = document.createElement('option');
            option.value = hourStr;
            option.textContent = hourStr;

            if (selectedHour && hourStr === selectedHour) {
                option.selected = true;
            }

            saatSelect.appendChild(option);
        }
    }

    // Update hour options when date changes
    document.addEventListener('DOMContentLoaded', function() {
        // EDIT MODAL - Date change
        const tarihInput = document.getElementById('editTarih');
        tarihInput?.addEventListener('change', function() {
            populateHourOptions(this.value);
        });

        // EDIT MODAL - Form submission
        const editForm = document.getElementById('editRandevuForm');
        editForm?.addEventListener('submit', function(e) {
            const tarih = document.getElementById('editTarih').value;
            const saat = document.getElementById('editSaat').value;

            if (!tarih || !saat) {
                e.preventDefault();
                alert('Lütfen tarih ve saat seçin.');
                return false;
            }

            const randevuZaman = tarih + 'T' + saat.substring(0, 5);
            document.getElementById('editRandevuZaman').value = randevuZaman;
            console.log('✅ Form gönderiliyor - Randevu Zamanı:', randevuZaman);
        });

        // CREATE MODAL - Store original musteri options
        const musteriSelect = document.getElementById('createMusteri');
        originalMusteriOptions = Array.from(musteriSelect?.querySelectorAll('option[data-topraktarid]') || []);

        // CREATE MODAL - Date change
        const createTarihInput = document.getElementById('createTarih');
        createTarihInput?.addEventListener('change', function() {
            populateCreateHourOptions(this.value);
        });

        // CREATE MODAL - Topraktar selection filters musteriler
        const topraktarSelect = document.getElementById('createTopraktar');

        topraktarSelect?.addEventListener('change', function() {
            const selectedTopraktarId = this.value;

            // Clear musteri selection
            musteriSelect.value = '';
            musteriSelect.disabled = false;

            // Reset and filter musteri options
            musteriSelect.innerHTML = '<option value="">Müşteri Seçin</option>';

            originalMusteriOptions.forEach(option => {
                const optionTopraktarId = option.getAttribute('data-topraktarid');

                // Show only musteriler of selected topraktar
                if (!selectedTopraktarId || optionTopraktarId === selectedTopraktarId) {
                    const newOption = option.cloneNode(true);
                    musteriSelect.appendChild(newOption);
                }
            });

            console.log('✅ Topraktar seçildi - Müşteriler filtrelendi');
        });

        // CREATE MODAL - Musteri selection auto-selects topraktar
        musteriSelect?.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            if (!selectedOption || !selectedOption.value) {
                topraktarSelect.disabled = false;
                return;
            }

            const topraktarId = selectedOption.getAttribute('data-topraktarid');
            if (topraktarId) {
                topraktarSelect.value = topraktarId;
                topraktarSelect.disabled = true;
                console.log('✅ Müşteri seçildi - Topraktar otomatik seçildi:', topraktarId);
            }
        });

        // CREATE MODAL - Form submission
        const createForm = document.getElementById('createRandevuForm');
        createForm?.addEventListener('submit', function(e) {
            const tarih = document.getElementById('createTarih').value;
            const saat = document.getElementById('createSaat').value;

            if (!tarih || !saat) {
                e.preventDefault();
                alert('Lütfen tarih ve saat seçin.');
                return false;
            }

            const randevuZaman = tarih + 'T' + saat.substring(0, 5);
            document.getElementById('createRandevuZaman').value = randevuZaman;
            console.log('✅ Yeni randevu oluşturuluyor - Randevu Zamanı:', randevuZaman);

            // Re-enable topraktar before submit (so it gets posted)
            topraktarSelect.disabled = false;
        });
    });

    function closeEditModal() {
        document.getElementById('editModal').classList.remove('active');
    }

    // Delete Modal - DATA ATTRIBUTE İLE
    function openDeleteModalData(button) {
        const id = button.getAttribute('data-id');
        console.log('🗑️ Delete modal açılıyor - ID:', id);

        document.getElementById('deleteRandevuId').value = id;
        document.getElementById('deleteModal').classList.add('active');
    }

    function closeDeleteModal() {
        document.getElementById('deleteModal').classList.remove('active');
    }

    // Helper function for status text
    function getDurumText(durum) {
        switch(durum.toLowerCase()) {
            case 'pending': return '⏳ Bekliyor';
            case 'confirmed': return '✓ Onaylandı';
            case 'completed': return '✓ Tamamlandı';
            case 'cancelled': return '✗ İptal';
            case 'no_show': return '⚠ Gelmedi';
            default: return durum;
        }
    }

    // Close modals on overlay click & ESC key
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.modal-overlay').forEach(modal => {
            modal.addEventListener('click', function (e) {
                if (e.target === this) {
                    this.classList.remove('active');
                }
            });
        });

        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape') {
                document.querySelectorAll('.modal-overlay').forEach(modal => {
                    modal.classList.remove('active');
                });
            }
        });
    });

    // Filter by status
    document.getElementById('statusFilter')?.addEventListener('change', function() {
        filterTable();
    });

    // Search functionality
    document.getElementById('searchInput')?.addEventListener('input', function() {
        filterTable();
    });

    function filterTable() {
        const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const rows = document.querySelectorAll('#randevularTable tbody tr');

        rows.forEach(row => {
            const status = row.getAttribute('data-status').toLowerCase();
            const searchData = row.getAttribute('data-search').toLowerCase();

            const statusMatch = !statusFilter || status === statusFilter;
            const searchMatch = !searchTerm || searchData.includes(searchTerm);

            if (statusMatch && searchMatch) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }
</script>