@{
    ViewData["Title"] = "Dashboard";
    Layout = "_LayoutTopraktar";
}
<link rel="stylesheet" href="~/css/topraktar-main-panel.css" asp-append-version="true" />

<style>
    .dashboard-header {
        margin-bottom: 32px;
    }

    .dashboard-title {
        font-size: 32px;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 8px;
    }

    .dashboard-subtitle {
        color: #6b7280;
        font-size: 14px;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 24px;
        margin-bottom: 32px;
    }

    .dashboard-card {
        background: white;
        border-radius: 16px;
        border: 1px solid #e5e7eb;
        padding: 24px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        opacity: 0;
        transform: translateY(20px);
        animation: slideUp 0.6s ease-out forwards;
    }

    .dashboard-card:nth-child(1) { animation-delay: 0s; }
    .dashboard-card:nth-child(2) { animation-delay: 0.1s; }
    .dashboard-card:nth-child(3) { animation-delay: 0.2s; }
    .dashboard-card:nth-child(4) { animation-delay: 0.3s; }

    @@keyframes slideUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .dashboard-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 24px rgba(0, 10, 104, 0.15);
    }

    .dashboard-card.blue:hover {
        border-color: #000a68;
    }

    .dashboard-card.green:hover {
        border-color: #10b981;
    }

    .dashboard-card.orange:hover {
        border-color: #f59e0b;
    }

    .dashboard-card.red:hover {
        border-color: #ef4444;
    }

    .dashboard-card:active {
        transform: translateY(-2px) scale(0.98);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 20px;
    }

    .icon-container {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.3s ease;
    }

    .dashboard-card:hover .icon-container {
        transform: scale(1.1) rotate(5deg);
    }

    .icon-container.blue {
        background: linear-gradient(135deg, rgba(0, 10, 104, 0.1), rgba(0, 10, 104, 0.2));
    }

    .icon-container.green {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.2));
    }

    .icon-container.orange {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(245, 158, 11, 0.2));
    }

    .icon-container.red {
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.2));
    }

    .icon-container svg {
        width: 24px;
        height: 24px;
    }

    .icon-container.blue svg {
        stroke: #000a68;
    }

    .icon-container.green svg {
        stroke: #10b981;
    }

    .icon-container.orange svg {
        stroke: #f59e0b;
    }

    .icon-container.red svg {
        stroke: #ef4444;
    }

    .trend-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .trend-badge.positive {
        background: #d1fae5;
        color: #065f46;
    }

    .trend-badge.negative {
        background: #fee2e2;
        color: #991b1b;
    }

    .trend-badge svg {
        width: 14px;
        height: 14px;
    }

    .urgent-badge {
        background: #fee2e2;
        color: #ef4444;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%, 100% {
            opacity: 1;
        }
        50% {
            opacity: 0.7;
        }
    }

    .card-content {
        margin-top: 20px;
    }

    .card-value {
        font-size: 36px;
        font-weight: 700;
        color: #1f2937;
        line-height: 1;
        margin-bottom: 8px;
    }

    .card-label {
        font-size: 14px;
        font-weight: 500;
        color: #6b7280;
        margin-bottom: 12px;
    }

    .mini-chart {
        height: 40px;
        margin: 12px 0;
        position: relative;
    }

    .chart-line {
        width: 100%;
        height: 100%;
    }

    .card-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 12px;
        border-top: 1px solid #f3f4f6;
        font-size: 12px;
    }

    .footer-info {
        color: #6b7280;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .footer-info svg {
        width: 12px;
        height: 12px;
    }

    .footer-link {
        color: #000a68;
        font-weight: 600;
        text-decoration: none;
        transition: opacity 0.2s;
    }

    .footer-link:hover {
        opacity: 0.8;
    }

    .ripple {
        position: absolute;
        border-radius: 50%;
        background: rgba(0, 0, 0, 0.1);
        transform: scale(0);
        animation: ripple-animation 0.6s ease-out;
        pointer-events: none;
    }

    @@keyframes ripple-animation {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }

    @@keyframes drawLine {
        to {
            stroke-dashoffset: 0;
        }
    }

    .section {
        background: white;
        padding: 24px;
        border-radius: 12px;
        border: 1px solid #e5e7eb;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .section-header h2 {
            font-size: 18px;
            font-weight: 600;
            color: #1f2937;
        }

    .view-all {
        color: #000a68;
        font-size: 14px;
        font-weight: 500;
        text-decoration: none;
    }

        .view-all:hover {
            text-decoration: underline;
        }

    .activity-list {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .activity-item {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .activity-icon {
        width: 40px;
        height: 40px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        flex-shrink: 0;
    }

        .activity-icon.success {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
        }

        .activity-icon.warning {
            background: rgba(245, 158, 11, 0.1);
            color: #f59e0b;
        }

        .activity-icon.info {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

    .activity-content {
        flex: 1;
    }

    .activity-title {
        font-weight: 500;
        color: #1f2937;
        margin-bottom: 4px;
    }

    .activity-time {
        font-size: 13px;
        color: #9ca3af;
    }

    .actions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 16px;
    }

    .action-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 12px;
        padding: 24px;
        border: 2px solid #e5e7eb;
        border-radius: 12px;
        text-decoration: none;
        color: #374151;
        font-weight: 500;
        transition: all 0.2s;
        text-align: center;
    }

        .action-card:hover {
            border-color: #000a68;
            color: #000a68;
            transform: translateY(-2px);
            background: rgba(0, 10, 104, 0.02);
        }

        .action-card svg {
            stroke: currentColor;
            fill: none;
            stroke-width: 2;
            width: 24px;
            height: 24px;
        }

    @@media (max-width: 1024px) {
        .dashboard-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (max-width: 768px) {
        .dashboard-grid {
            grid-template-columns: 1fr;
        }

        .card-value {
            font-size: 28px;
        }

        .dashboard-title {
            font-size: 24px;
        }

        .mini-chart {
            height: 30px;
        }

        .actions-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }
</style>

<div class="topraktar-main-panel">
    <div class="main-content">
        <div class="dashboard-header">
            <h1 class="dashboard-title">DORTAGE Topraktar Panel</h1>
            <p class="dashboard-subtitle">Güncel istatistikler ve özet bilgiler</p>
        </div>

        <div class="dashboard-grid">
            <!-- Card 1: Toplam Müşteriler -->
            <div class="dashboard-card blue">
                <div class="card-header">
                    <div class="icon-container blue">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                    </div>
                    @if (ViewBag.CustomerPercentChange != 0)
                    {
                        <div class="trend-badge @(ViewBag.CustomerPercentChange > 0 ? "positive" : "negative")">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                @if (ViewBag.CustomerPercentChange > 0)
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                                }
                                else
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6"></path>
                                }
                            </svg>
                            @(ViewBag.CustomerPercentChange > 0 ? "+" : "")@ViewBag.CustomerPercentChange%
                        </div>
                    }
                </div>
                <div class="card-content">
                    <div class="card-value" data-target="@(ViewBag.TotalCustomers ?? 0)">0</div>
                    <div class="card-label">Toplam Müşteri</div>
                    <svg class="mini-chart" viewBox="0 0 200 40" preserveAspectRatio="none">
                        <defs>
                            <linearGradient id="gradient1" x1="0%" y1="0%" x2="0%" y2="100%">
                                <stop offset="0%" style="stop-color:rgba(0,10,104,0.2);stop-opacity:1" />
                                <stop offset="100%" style="stop-color:rgba(0,10,104,0);stop-opacity:1" />
                            </linearGradient>
                        </defs>
                        <path class="chart-path" fill="url(#gradient1)" stroke="#000a68" stroke-width="2" d="M0,30 L28,25 L57,28 L86,20 L114,22 L143,15 L171,18 L200,10 L200,40 L0,40 Z" style="stroke-dasharray: 500; stroke-dashoffset: 500; animation: drawLine 1.5s ease-out forwards;"></path>
                    </svg>
                </div>
                <div class="card-footer">
                    <div class="footer-info">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        Bu Ay: +@(ViewBag.CustomersThisMonth ?? 0)
                    </div>
                    <a asp-controller="Musteri" asp-action="Index" class="footer-link">Detaylar →</a>
                </div>
            </div>

            <!-- Card 2: Toplam Satış -->
            <div class="dashboard-card green">
                <div class="card-header">
                    <div class="icon-container green">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                    </div>
                    @if (ViewBag.SalesPercentChange != 0)
                    {
                        <div class="trend-badge @(ViewBag.SalesPercentChange > 0 ? "positive" : "negative")">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                @if (ViewBag.SalesPercentChange > 0)
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                                }
                                else
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6"></path>
                                }
                            </svg>
                            @(ViewBag.SalesPercentChange > 0 ? "+" : "")@ViewBag.SalesPercentChange%
                        </div>
                    }
                </div>
                <div class="card-content">
                    <div class="card-value" data-target="@(ViewBag.TotalSales ?? 0)">0</div>
                    <div class="card-label">Toplam Satış</div>
                    <svg class="mini-chart" viewBox="0 0 200 40" preserveAspectRatio="none">
                        <defs>
                            <linearGradient id="gradient2" x1="0%" y1="0%" x2="0%" y2="100%">
                                <stop offset="0%" style="stop-color:rgba(16,185,129,0.2);stop-opacity:1" />
                                <stop offset="100%" style="stop-color:rgba(16,185,129,0);stop-opacity:1" />
                            </linearGradient>
                        </defs>
                        <path class="chart-path" fill="url(#gradient2)" stroke="#10b981" stroke-width="2" d="M0,35 L28,32 L57,28 L86,25 L114,20 L143,22 L171,15 L200,12 L200,40 L0,40 Z" style="stroke-dasharray: 500; stroke-dashoffset: 500; animation: drawLine 1.5s ease-out forwards 0.1s;"></path>
                    </svg>
                </div>
                <div class="card-footer">
                    <div class="footer-info">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        Bu Ay: +@(ViewBag.SalesThisMonth ?? 0)
                    </div>
                    <a asp-controller="Satis" asp-action="Index" class="footer-link">Detaylar →</a>
                </div>
            </div>

            <!-- Card 3: Toplam Komisyon -->
            <div class="dashboard-card orange">
                <div class="card-header">
                    <div class="icon-container orange">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                        </svg>
                    </div>
                    @if (ViewBag.CommissionPercentChange != 0)
                    {
                        <div class="trend-badge @(ViewBag.CommissionPercentChange > 0 ? "positive" : "negative")">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                @if (ViewBag.CommissionPercentChange > 0)
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                                }
                                else
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6"></path>
                                }
                            </svg>
                            @(ViewBag.CommissionPercentChange > 0 ? "+" : "")@ViewBag.CommissionPercentChange%
                        </div>
                    }
                </div>
                <div class="card-content">
                    <div class="card-value" data-target="@((int)(ViewBag.TotalCommission ?? 0))" data-currency="₺">₺0</div>
                    <div class="card-label">Toplam Komisyon</div>
                    <svg class="mini-chart" viewBox="0 0 200 40" preserveAspectRatio="none">
                        <defs>
                            <linearGradient id="gradient3" x1="0%" y1="0%" x2="0%" y2="100%">
                                <stop offset="0%" style="stop-color:rgba(245,158,11,0.2);stop-opacity:1" />
                                <stop offset="100%" style="stop-color:rgba(245,158,11,0);stop-opacity:1" />
                            </linearGradient>
                        </defs>
                        <path class="chart-path" fill="url(#gradient3)" stroke="#f59e0b" stroke-width="2" d="M0,32 L28,30 L57,26 L86,28 L114,18 L143,20 L171,12 L200,8 L200,40 L0,40 Z" style="stroke-dasharray: 500; stroke-dashoffset: 500; animation: drawLine 1.5s ease-out forwards 0.2s;"></path>
                    </svg>
                </div>
                <div class="card-footer">
                    <div class="footer-info">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        Bu Ay: ₺@((ViewBag.CommissionThisMonth ?? 0m).ToString("N0"))
                    </div>
                    <a asp-controller="Satis" asp-action="Index" class="footer-link">Ödemeler →</a>
                </div>
            </div>

            <!-- Card 4: Bekleyen Randevular -->
            <div class="dashboard-card red">
                <div class="card-header">
                    <div class="icon-container red">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    @if (ViewBag.PendingAppointments > 0)
                    {
                        <div class="urgent-badge">Acil</div>
                    }
                </div>
                <div class="card-content">
                    <div class="card-value" data-target="@(ViewBag.PendingAppointments ?? 0)">0</div>
                    <div class="card-label">Bekleyen Randevu</div>
                    <svg class="mini-chart" viewBox="0 0 200 40" preserveAspectRatio="none">
                        <defs>
                            <linearGradient id="gradient4" x1="0%" y1="0%" x2="0%" y2="100%">
                                <stop offset="0%" style="stop-color:rgba(239,68,68,0.2);stop-opacity:1" />
                                <stop offset="100%" style="stop-color:rgba(239,68,68,0);stop-opacity:1" />
                            </linearGradient>
                        </defs>
                        <path class="chart-path" fill="url(#gradient4)" stroke="#ef4444" stroke-width="2" d="M0,25 L28,22 L57,28 L86,20 L114,25 L143,18 L171,20 L200,15 L200,40 L0,40 Z" style="stroke-dasharray: 500; stroke-dashoffset: 500; animation: drawLine 1.5s ease-out forwards 0.3s;"></path>
                    </svg>
                </div>
                <div class="card-footer">
                    <div class="footer-info">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        Bugün: @(ViewBag.TodayAppointments ?? 0)
                    </div>
                    <a asp-controller="Randevu" asp-action="Index" class="footer-link">Takvim →</a>
                </div>
            </div>
        </div>

            <!-- Son Aktiviteler -->
            <div style="margin-bottom: 32px" class="section recent-activity">
                <div class="section-header">
                    <h2>Son Aktiviteler</h2>
                </div>
                <div class="activity-list">
                    @if (ViewBag.RecentActivities != null && ((List<object>)ViewBag.RecentActivities).Count > 0)
                    {
                        @foreach (dynamic activity in ViewBag.RecentActivities)
                        {
                            var timeAgo = GetTimeAgo(activity.Time);
                            var iconClass = activity.Icon == "success" ? "success" : (activity.Icon == "warning" ? "warning" : "info");
                            var iconSymbol = activity.Icon == "success" ? "✓" : (activity.Icon == "warning" ? "⏰" : "👤");

                            <div class="activity-item">
                                <div class="activity-icon @iconClass">@iconSymbol</div>
                                <div class="activity-content">
                                    <p class="activity-title">@activity.Title</p>
                                    <p class="activity-time">@timeAgo</p>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="activity-item">
                            <div class="activity-icon info">ℹ</div>
                            <div class="activity-content">
                                <p class="activity-title">Henüz aktivite yok</p>
                                <p class="activity-time">Müşteri, randevu veya satış ekleyerek başlayın</p>
                            </div>
                        </div>
                    }
                </div>
            </div>

            @functions {
                string GetTimeAgo(DateTime date)
                {
                    var timeSpan = DateTime.Now - date;

                    if (timeSpan.TotalMinutes < 1)
                        return "Az önce";
                    if (timeSpan.TotalMinutes < 60)
                        return $"{(int)timeSpan.TotalMinutes} dakika önce";
                    if (timeSpan.TotalHours < 24)
                        return $"{(int)timeSpan.TotalHours} saat önce";
                    if (timeSpan.TotalDays < 7)
                        return $"{(int)timeSpan.TotalDays} gün önce";
                    if (timeSpan.TotalDays < 30)
                        return $"{(int)(timeSpan.TotalDays / 7)} hafta önce";
                    if (timeSpan.TotalDays < 365)
                        return $"{(int)(timeSpan.TotalDays / 30)} ay önce";

                    return $"{(int)(timeSpan.TotalDays / 365)} yıl önce";
                }
            }

            <!-- Hızlı İşlemler -->
            <div class="section quick-actions">
                <div class="section-header">
                    <h2>Hızlı İşlemler</h2>
                </div>
                <div class="actions-grid">
                    <a asp-controller="Musteri" asp-action="Create" class="action-card">
                        <svg viewBox="0 0 24 24">
                            <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                            <circle cx="8.5" cy="7" r="4"></circle>
                            <line x1="20" y1="8" x2="20" y2="14"></line>
                            <line x1="23" y1="11" x2="17" y2="11"></line>
                        </svg>
                        <span>Yeni Müşteri</span>
                    </a>
                    <a asp-controller="Randevu" asp-action="Create" class="action-card">
                        <svg viewBox="0 0 24 24">
                            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                            <line x1="16" y1="2" x2="16" y2="6"></line>
                            <line x1="8" y1="2" x2="8" y2="6"></line>
                            <line x1="3" y1="10" x2="21" y2="10"></line>
                            <line x1="12" y1="14" x2="12" y2="18"></line>
                            <line x1="10" y1="16" x2="14" y2="16"></line>
                        </svg>
                        <span>Randevu Oluştur</span>
                    </a>
                    <a asp-controller="Settings" asp-action="Profile" class="action-card">
                        <svg viewBox="0 0 24 24">
                            <circle cx="12" cy="12" r="3"></circle>
                            <path d="M12 1v6m0 6v6"></path>
                        </svg>
                        <span>Ayarlar</span>
                    </a>
                </div>
            </div>
        </div>
    </div>

<script>
    // Count up animation
    function animateValue(element, start, end, duration, currency = '') {
        const range = end - start;
        const increment = range / (duration / 16);
        let current = start;

        const timer = setInterval(() => {
            current += increment;
            if ((increment > 0 && current >= end) || (increment < 0 && current <= end)) {
                current = end;
                clearInterval(timer);
            }

            if (currency) {
                element.textContent = currency + Math.floor(current).toLocaleString('tr-TR');
            } else {
                element.textContent = Math.floor(current).toLocaleString('tr-TR');
            }
        }, 16);
    }

    // Initialize count-up animations
    document.addEventListener('DOMContentLoaded', () => {
        const valueElements = document.querySelectorAll('.card-value');

        valueElements.forEach(element => {
            const target = parseInt(element.getAttribute('data-target'));
            const currency = element.getAttribute('data-currency') || '';

            setTimeout(() => {
                animateValue(element, 0, target, 1200, currency);
            }, 300);
        });
    });

    // Ripple effect
    document.querySelectorAll('.dashboard-card').forEach(card => {
        card.addEventListener('click', function(e) {
            // Don't create ripple if clicking on links
            if (e.target.closest('a')) {
                return;
            }

            const ripple = document.createElement('div');
            ripple.className = 'ripple';

            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;

            ripple.style.width = ripple.style.height = size + 'px';
            ripple.style.left = x + 'px';
            ripple.style.top = y + 'px';

            this.appendChild(ripple);

            setTimeout(() => {
                ripple.remove();
            }, 600);
        });
    });

    // Intersection Observer for entrance animations
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);

    // Observe all cards
    document.querySelectorAll('.dashboard-card').forEach(card => {
        observer.observe(card);
    });

    // Responsive chart adjustments
    function adjustCharts() {
        const width = window.innerWidth;
        const charts = document.querySelectorAll('.mini-chart');

        charts.forEach(chart => {
            if (width < 768) {
                chart.style.height = '30px';
            } else {
                chart.style.height = '40px';
            }
        });
    }

    window.addEventListener('resize', adjustCharts);
    adjustCharts();

    // Touch feedback for mobile
    if ('ontouchstart' in window) {
        document.querySelectorAll('.dashboard-card, .action-card').forEach(element => {
            element.addEventListener('touchstart', function() {
                this.style.opacity = '0.8';
            });

            element.addEventListener('touchend', function() {
                this.style.opacity = '1';
            });
        });
    }

    console.log('DORTAGE Topraktar Dashboard initialized successfully!');
</script>