@model RandevuCreateVM

@{
    ViewData["Title"] = "Randevu Düzenle";
    Layout = "_LayoutTopraktar";
    var randevuId = ViewData["RandevuId"];
    var randevuDurum = (RandevuDurum?)ViewData["RandevuDurum"];
}

<link rel="stylesheet" href="~/css/topraktar-main-panel.css" asp-append-version="true" />

<style>
    .form-container {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        padding: 32px;
        border-radius: 16px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .form-header {
        margin-bottom: 32px;
        padding-bottom: 24px;
        border-bottom: 1px solid #e5e7eb;
    }

    .form-title {
        font-size: 24px;
        font-weight: 700;
        color: #000a68;
        margin-bottom: 8px;
    }

    .form-subtitle {
        color: #6b7280;
        font-size: 15px;
    }

    .status-info {
        background: #f9fafb;
        padding: 16px;
        border-radius: 10px;
        margin-bottom: 24px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .status-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        flex-shrink: 0;
    }

        .status-icon.pending {
            background: #fef3c7;
            color: #92400e;
        }

        .status-icon.confirmed {
            background: #dbeafe;
            color: #1e40af;
        }

        .status-icon.completed {
            background: #d1fae5;
            color: #065f46;
        }

        .status-icon.cancelled {
            background: #fee2e2;
            color: #991b1b;
        }

        .status-icon.no_show {
            background: #f3f4f6;
            color: #4b5563;
        }

    .status-content {
        flex: 1;
    }

    .status-label {
        font-size: 13px;
        color: #6b7280;
        margin-bottom: 4px;
    }

    .status-value {
        font-size: 16px;
        font-weight: 600;
        color: #1f2937;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            font-size: 14px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
        }

    .required {
        color: #ef4444;
    }

    .input-wrapper {
        position: relative;
    }

    .input-icon {
        position: absolute;
        left: 16px;
        top: 50%;
        transform: translateY(-50%);
        color: #9ca3af;
        width: 20px;
        height: 20px;
    }

    input, select, textarea {
        width: 100%;
        padding: 12px 16px 12px 48px;
        border: 2px solid #e5e7eb;
        border-radius: 10px;
        font-size: 15px;
        transition: all 0.2s;
    }

    textarea {
        min-height: 100px;
        resize: vertical;
    }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #000a68;
            box-shadow: 0 0 0 3px rgba(0, 10, 104, 0.1);
        }

    .text-danger {
        color: #ef4444;
        font-size: 13px;
        margin-top: 6px;
        display: block;
    }

    .form-actions {
        display: flex;
        gap: 12px;
        padding-top: 24px;
        border-top: 1px solid #e5e7eb;
    }

    .btn {
        flex: 1;
        padding: 14px 24px;
        border-radius: 10px;
        font-size: 16px;
        font-weight: 600;
        text-decoration: none;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
        border: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, #000a68 0%, #001a88 100%);
        color: white;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0, 10, 104, 0.3);
        }

    .btn-secondary {
        background: #f3f4f6;
        color: #374151;
    }

        .btn-secondary:hover {
            background: #e5e7eb;
        }

    .quick-time-buttons {
        display: flex;
        gap: 8px;
        margin-top: 8px;
        flex-wrap: wrap;
    }

    .quick-time-btn {
        padding: 6px 12px;
        background: #f3f4f6;
        border: none;
        border-radius: 6px;
        font-size: 13px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

        .quick-time-btn:hover {
            background: #e5e7eb;
        }

    .alert {
        padding: 16px;
        border-radius: 10px;
        margin-bottom: 24px;
        display: flex;
        align-items: center;
        gap: 12px;
        font-size: 15px;
        animation: slideIn 0.3s ease;
    }

    .alert-success {
        background: #d1fae5;
        color: #065f46;
        border: 1px solid #10b981;
    }

    .alert-error {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #ef4444;
    }

    @@keyframes slideIn {
        from

    {
        opacity: 0;
        transform: translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@media (max-width: 768px) {
        .form-container

    {
        padding: 24px;
    }

    .form-row {
        grid-template-columns: 1fr;
    }

    .form-actions {
        flex-direction: column;
    }

    }
</style>

<div class="topraktar-main-panel">
    <div class="main-content">
        <div class="form-container">
            <div class="form-header">
                <h1 class="form-title">@ViewData["Title"]</h1>
                <p class="form-subtitle">Randevu bilgilerini güncelleyin</p>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="20 6 9 17 4 12"></polyline>
                    </svg>
                    @TempData["SuccessMessage"]
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-error">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="12" y1="8" x2="12" y2="12"></line>
                        <line x1="12" y1="16" x2="12.01" y2="16"></line>
                    </svg>
                    @TempData["ErrorMessage"]
                </div>
            }

            @if (randevuDurum != null)
            {
                <div class="status-info">
                    <div class="status-icon @randevuDurum.ToString()">
                        @switch (randevuDurum)
                        {
                            case RandevuDurum.pending:
                                <text>⏳</text>
                                break;
                            case RandevuDurum.confirmed:
                                <text>✓</text>
                                break;
                            case RandevuDurum.completed:
                                <text>✓</text>
                                break;
                            case RandevuDurum.cancelled:
                                <text>✗</text>
                                break;
                            case RandevuDurum.no_show:
                                <text>⊘</text>
                                break;
                        }
                    </div>
                    <div class="status-content">
                        <div class="status-label">Mevcut Durum</div>
                        <div class="status-value">
                            @switch (randevuDurum)
                            {
                                case RandevuDurum.pending:
                                    <text>Bekliyor</text>
                                    break;
                                case RandevuDurum.confirmed:
                                    <text>Onaylandı</text>
                                    break;
                                case RandevuDurum.completed:
                                    <text>Tamamlandı</text>
                                    break;
                                case RandevuDurum.cancelled:
                                    <text>İptal Edildi</text>
                                    break;
                                case RandevuDurum.no_show:
                                    <text>Gelmedi</text>
                                    break;
                            }
                        </div>
                    </div>
                </div>
            }

            <form asp-action="Edit" asp-route-id="@randevuId" method="post">
                @Html.AntiForgeryToken()

                <div class="form-group">
                    <label asp-for="MusteriId">Müşteri <span class="required">*</span></label>
                    <div class="input-wrapper">
                        <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        <select asp-for="MusteriId" asp-items="ViewBag.Musteriler" style="padding-left: 48px;">
                            <option value="">Müşteri seçin</option>
                        </select>
                    </div>
                    <span asp-validation-for="MusteriId" class="text-danger"></span>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label asp-for="RandevuZaman">Randevu Tarihi ve Saati <span class="required">*</span></label>
                        <div class="input-wrapper">
                            <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                <line x1="16" y1="2" x2="16" y2="6"></line>
                                <line x1="8" y1="2" x2="8" y2="6"></line>
                                <line x1="3" y1="10" x2="21" y2="10"></line>
                            </svg>
                            <input asp-for="RandevuZaman" type="datetime-local" id="randevuZamanInput" />
                        </div>
                        <div class="quick-time-buttons">
                            <button type="button" class="quick-time-btn" onclick="setQuickTime(1)">Yarın 10:00</button>
                            <button type="button" class="quick-time-btn" onclick="setQuickTime(1, 14)">Yarın 14:00</button>
                            <button type="button" class="quick-time-btn" onclick="setQuickTime(2)">2 Gün Sonra</button>
                            <button type="button" class="quick-time-btn" onclick="setQuickTime(7)">1 Hafta Sonra</button>
                        </div>
                        <span asp-validation-for="RandevuZaman" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="RandevuTipi">Randevu Tipi <span class="required">*</span></label>
                        <div class="input-wrapper">
                            <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                            </svg>
                            <select asp-for="RandevuTipi" style="padding-left: 48px;">
                                <option value="">Tip seçin</option>
                                <option value="Keşif">Keşif</option>
                                <option value="Sunum">Sunum</option>
                                <option value="Sözleşme">Sözleşme</option>
                                <option value="Diğer">Diğer</option>
                            </select>
                        </div>
                        <span asp-validation-for="RandevuTipi" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="Bolge">Bölge/Adres <span class="required">*</span></label>
                    <div class="input-wrapper">
                        <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                            <circle cx="12" cy="10" r="3" />
                        </svg>
                        <textarea asp-for="Bolge" placeholder="Randevu adresi veya bölge bilgisi"></textarea>
                    </div>
                    <span asp-validation-for="Bolge" class="text-danger"></span>
                </div>

                <div class="form-actions">
                    <a asp-action="Index" class="btn btn-secondary">İptal</a>
                    <button type="submit" class="btn btn-primary">Güncelle</button>
                </div>
            </form>
        </div>
    </div>
</div>

<partial name="_ValidationScriptsPartial" />
<script>
    // Quick time setter
    function setQuickTime(days, hour = 10) {
        const input = document.getElementById('randevuZamanInput');
        const date = new Date();
        date.setDate(date.getDate() + days);
        date.setHours(hour);
        date.setMinutes(0);
        date.setSeconds(0);

        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');

        input.value = `${year}-${month}-${day}T${hours}:${minutes}`;
    }

    // Set minimum date to today
    document.addEventListener('DOMContentLoaded', function() {
        const input = document.getElementById('randevuZamanInput');
        if (input && !input.value) {
            const now = new Date();
            now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
            input.min = now.toISOString().slice(0, 16);
        }
    });

    // Auto-hide alerts after 5 seconds
    setTimeout(() => {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            alert.style.transition = 'opacity 0.3s';
            alert.style.opacity = '0';
            setTimeout(() => alert.remove(), 300);
        });
    }, 5000);
</script>